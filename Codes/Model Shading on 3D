#include <GL/glut.h>

void display();
void reshape(int,int);
void timer(int);

void EnableLighting();

void init()
{
	glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
	glEnable(GL_DEPTH_TEST);
	EnableLighting();


}

void EnableLighting( void )
{	
	glEnable(GL_LIGHTING); //enable light duh.
	glEnable(GL_LIGHT0); // define light 0
	glShadeModel(GL_SMOOTH); //shading to smooth
	glEnable(GL_NORMALIZE);  // normalize models


	//define default lighting
	GLfloat qaAmbientLight[]	= {0.2, 0.2, 0.2, 1.0};
	GLfloat qaDiffuseLight[]	= {0.8, 0.8, 0.8, 1.0};
	GLfloat qaSpecularLight[]	= {1.0, 1.0, 1.0, 1.0};
	glLightfv(GL_LIGHT0, GL_AMBIENT, qaAmbientLight);
	glLightfv(GL_LIGHT0, GL_DIFFUSE, qaDiffuseLight);
	glLightfv(GL_LIGHT0, GL_SPECULAR, qaSpecularLight);

	//lighting position           x    y    z
	GLfloat light0_position[] = {1.0, 1.0, 1.0, 1.0};
	glLightfv(GL_LIGHT0, GL_POSITION, light0_position); 
}


int main(int argc,char**argv)
{
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
	glutInitDisplayMode(GLUT_RGB);

	glutInitWindowPosition(200,200);
	glutInitWindowSize(640,480);
	glutCreateWindow("Window");
	 

	glutDisplayFunc(display);
	glutReshapeFunc(reshape);
	glutTimerFunc(0,timer,0);
	init();


	glutMainLoop();

}

float angle = 0.0f;
int state = 1;

void display()
{
	//draw black buffer
	glDrawBuffer( GL_BACK );

	//define materials
	GLfloat qaBlack[] = {0.0, 0.0, 0.0, 1.0};
	GLfloat qaGrey[] = {0.3, 0.3, 0.3, 1.0};
	GLfloat qaGreen[] = {0.0, 1.0, 0.0, 1.0};
	GLfloat qaRed[] = {1.0, 0.0, 0.0, 1.0};
	GLfloat qaBlue[] = {0.0, 0.0, 1.0, 1.0};
	GLfloat qaWhite[] = {1.0, 1.0, 1.0, 1.0};
	GLfloat qaLowAmbient[] = {0.2, 0.2, 0.2, 1.0};
	GLfloat qaFullAmbient[] = {1.0, 1.0, 1.0, 1.0};

	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glLoadIdentity();

	glTranslatef(0.0f,0.0f,-10.0);

	glRotatef(angle,1.0f,0.0f,0.0f);

	//apply material
	glMaterialfv(GL_FRONT, GL_AMBIENT, qaGreen);
		glMaterialfv(GL_FRONT, GL_DIFFUSE, qaGreen);
		glMaterialfv(GL_FRONT, GL_SPECULAR, qaWhite);
		glMaterialf(GL_FRONT, GL_SHININESS, 128.0);
		glLightfv(GL_LIGHT0, GL_AMBIENT, qaLowAmbient);

	glBegin(GL_QUADS);
	//front!
	glNormal3f(0.0,0.0,1.0);
   // glColor3f(1.0,0.0,0.0);
    glVertex3f(-1.0,1.0,1.0);
    glVertex3f(-1.0,-1.0,1.0);
    glVertex3f(1.0,-1.0,1.0);
    glVertex3f(1.0,1.0,1.0);
    //back
	 glNormal3f(0.0,0.0,-1.0);
   // glColor3f(0.0,1.0,0.0);
    glVertex3f(1.0,1.0,-1.0);
    glVertex3f(1.0,-1.0,-1.0);
    glVertex3f(-1.0,-1.0,-1.0);
    glVertex3f(-1.0,1.0,-1.0);
    //right
	glNormal3f(1.0,0.0,0.0);
   // glColor3f(0.0,0.0,1.0);
    glVertex3f(1.0,1.0,1.0);
    glVertex3f(1.0,-1.0,1.0);
    glVertex3f(1.0,-1.0,-1.0);
    glVertex3f(1.0,1.0,-1.0);
    //left
	 glNormal3f(-1.0,0.0,0.0);
 //   glColor3f(1.0,1.0,0.0);
    glVertex3f(-1.0,1.0,-1.0);
    glVertex3f(-1.0,-1.0,-1.0);
    glVertex3f(-1.0,-1.0,1.0);
    glVertex3f(-1.0,1.0,1.0);
    //top
	glNormal3f(0.0,1.0,0.0);
  //  glColor3f(0.0,1.0,1.0);
    glVertex3f(-1.0,1.0,-1.0);
    glVertex3f(-1.0,1.0,1.0);
    glVertex3f(1.0,1.0,1.0);
    glVertex3f(1.0,1.0,-1.0);
    //bottom
	 glNormal3f(0.0,-1.0,0.0);
 //   glColor3f(1.0,0.0,1.0);
    glVertex3f(-1.0,-1.0,-1.0);
    glVertex3f(-1.0,-1.0,1.0);
    glVertex3f(1.0,-1.0,1.0);
    glVertex3f(1.0,-1.0,-1.0);
	
	glEnd();

	glLoadIdentity();
	glTranslatef(3.0f,0.0f,-10.0);

	glRotatef(angle,0.0f,1.0f,0.0f);

	//apply material
	glMaterialfv(GL_FRONT, GL_AMBIENT, qaRed);
		glMaterialfv(GL_FRONT, GL_DIFFUSE, qaRed);
		glMaterialfv(GL_FRONT, GL_SPECULAR, qaWhite);
		glMaterialf(GL_FRONT, GL_SHININESS, 128.0);
		glLightfv(GL_LIGHT0, GL_AMBIENT, qaLowAmbient);

	glBegin(GL_QUADS);
	//front!

	glNormal3f(0.0,0.0,1.0);
   // glColor3f(1.0,0.0,0.0);
    glVertex3f(-1.0,1.0,1.0);
    glVertex3f(-1.0,-1.0,1.0);
    glVertex3f(1.0,-1.0,1.0);
    glVertex3f(1.0,1.0,1.0);
    //back
	 glNormal3f(0.0,0.0,-1.0);
   // glColor3f(0.0,1.0,0.0);
   
    glVertex3f(1.0,1.0,-1.0);
    glVertex3f(1.0,-1.0,-1.0);
    glVertex3f(-1.0,-1.0,-1.0);
    glVertex3f(-1.0,1.0,-1.0);
    //right
	glNormal3f(1.0,0.0,0.0);
   // glColor3f(0.0,0.0,1.0);
    glVertex3f(1.0,1.0,1.0);
    glVertex3f(1.0,-1.0,1.0);
    glVertex3f(1.0,-1.0,-1.0);
    glVertex3f(1.0,1.0,-1.0);
    //left
	 glNormal3f(-1.0,0.0,0.0);
 //   glColor3f(1.0,1.0,0.0);
    glVertex3f(-1.0,1.0,-1.0);
    glVertex3f(-1.0,-1.0,-1.0);
    glVertex3f(-1.0,-1.0,1.0);
    glVertex3f(-1.0,1.0,1.0);
    //top
	glNormal3f(0.0,1.0,0.0);
  //  glColor3f(0.0,1.0,1.0);
    glVertex3f(-1.0,1.0,-1.0);
    glVertex3f(-1.0,1.0,1.0);
    glVertex3f(1.0,1.0,1.0);
    glVertex3f(1.0,1.0,-1.0);
    //bottom
	 glNormal3f(0.0,-1.0,0.0);
 //   glColor3f(1.0,0.0,1.0);
    glVertex3f(-1.0,-1.0,-1.0);
    glVertex3f(-1.0,-1.0,1.0);
    glVertex3f(1.0,-1.0,1.0);
    glVertex3f(1.0,-1.0,-1.0);
	
	glEnd();

	glLoadIdentity();
	glTranslatef(0.0f,-6.0f,-8.0);

	//apply material
	glMaterialfv(GL_FRONT, GL_AMBIENT, qaGrey);
		glMaterialfv(GL_FRONT, GL_DIFFUSE, qaGrey);
		glMaterialfv(GL_FRONT, GL_SPECULAR, qaWhite);

	glBegin(GL_QUADS);
	glNormal3f(0.0,1.0,0.0);
  //  glColor3f(0.0,1.0,1.0);
    glVertex3f(-5.0,5.0,-5.0);
    glVertex3f(-5.0,5.0,6.0);
    glVertex3f(5.0,5.0,5.0);
    glVertex3f(5.0,5.0,-5.0);
	glEnd();

	glutSwapBuffers();
}

void reshape(int w, int h)
{
	glViewport(0,0, (GLsizei)w, (GLsizei)h);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluPerspective(60,1,2.0,50.0);
	glMatrixMode(GL_MODELVIEW);

}

void timer(int)
{
	glutPostRedisplay();
	glutTimerFunc(1000/60,timer,0);

	

	angle+=0.8;
	if(angle>360.0f)
		angle=angle-360.0f;
}
